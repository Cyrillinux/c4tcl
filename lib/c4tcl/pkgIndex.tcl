#****************************************
#* c4tcl (c) Cyril BARBATO 2018-2019    *
#* package for call C functions in TCL  *
#* under GPL Lisense                    *
#* *** DISCLAIMER OF ALL WARRANTIES *** *
#****************************************
#PKG TEST AND PROVIDE
if {[catch {package present Tcl 8.6.0}]} return
package provide c4tcl 0.1

#C4TCL _C_ Function
global argv0 argv _c_id_ _c_flag_ _c_dllext_
set _c_id_ 0 ; set _c_flag_ 1
proc _C_ "{_c_code_ {}} {_c_argvstr {$argv0 $argv}} {_c_app_ generic} args" {
global env argv0 tcl_platform _c_id_ _c_flag_
#Pass arguments list by environnement variable
set env(LIBC4TCL_ARGS) $_c_argvstr
#Init app name and test platform type
if {$tcl_platform(platform)=="windows"} {set _c_dllext_ dll} else {set _c_dllext_ so}
if $_c_flag_ {
	#LOAD (SO/DLL) IF EXIST
	catch {foreach dll [glob -type f lib*c4tcl*.$_c_dllext_] {load ./$dll C4tcltmp}} result
	if {$result!=""} {puts "C4TCL NO LIB (SO/DLL) LOADING : $result"}
	set _c_flag_ 0
}
if [file exists lib[set _c_app_]c4tcl$_c_id_.$_c_dllext_] return
if {$_c_code_ eq {}} return
set fd [open "lib[set _c_app_]c4tcl$_c_id_.c" w]
puts $fd "/****************************************"
puts $fd " * Generated by c4tcl (c) Cyril BARBATO *"
puts $fd " * from calling TCL _C_ function.       *"
puts $fd " * ** DISCLAIMER FROM ALL WARRANTIES ** *"
puts $fd " ****************************************/"
puts $fd "#include <stdlib.h>"
puts $fd "#ifndef _TCL"
puts $fd "#include <tcl.h>"
puts $fd "#endif"
puts $fd "/******************"
puts $fd " * libc4tcl main entry point prototype"
puts $fd " */"
puts $fd "int libc4tcl_main (Tcl_Interp *interp, int argc, char **argv);"
puts $fd $_c_code_
puts $fd "/******************"
puts $fd " * TCL Library Init (real) entry point"
puts $fd " */"
puts $fd "int C4tcltmp_Init (Tcl_Interp *interp) \{"
puts $fd "/*init classic C arguments from environnement variable*/"
puts $fd "int argc=1;"
puts $fd "char *p=NULL;"
puts $fd "char *argv\[1024\];"
puts $fd "argv\[0\]=getenv(\"LIBC4TCL_ARGS\");"
puts $fd "for (p=argv\[0\];*p!=0;p++) \{"
puts $fd "	if (*p==0x20) \{"
puts $fd "		*p=0;"
puts $fd "		argv\[(++argc-1)\]=++p;"		
puts $fd "	\}"
puts $fd "\}"
puts $fd "/******************"
puts $fd " * libc4tcl main entry point"
puts $fd " */"
puts $fd "libc4tcl_main(interp,argc,argv);"
puts $fd "return TCL_OK;"
puts $fd "\}"
close $fd
#CREATE (SO/DLL) IF NOT EXIST FROM C CODE
switch $tcl_platform(platform) {
	unix { if {$args!="{}"} {
        puts "Unix system..."
		catch "exec gcc -fPIC -shared -o lib[set _c_app_]c4tcl$_c_id_.$_c_dllext_ -I. lib[set _c_app_]c4tcl$_c_id_.c [exec find /usr/lib -name libtcl.so] $args" result
		} else {
		catch "exec gcc -fPIC -shared -o lib[set _c_app_]c4tcl$_c_id_.$_c_dllext_ -I. lib[set _c_app_]c4tcl$_c_id_.c [exec find /usr/lib -name libtcl.so]" result
		}
	}
	windows { if {$args!="{}"} {
		catch "exec gcc -m32 -shared -o lib[set _c_app_]c4tcl$_c_id_.$_c_dllext_ -I. lib[set _c_app_]c4tcl$_c_id_.c ./tcl86.dll $args" result
		} else {
		catch "exec gcc -m32 -shared -o lib[set _c_app_]c4tcl$_c_id_.$_c_dllext_ -I. lib[set _c_app_]c4tcl$_c_id_.c ./tcl86.dll" result
		}
	}
    default {puts "System not using..."}
}
puts "GCC Info : $result (Path : [pwd]; App flags : $args)"
if {[string first "Permission denied" $result ]!=-1} {} {
	if {[string first "no such file" $result ]!=-1} {} {
		if {$result==""} {} {set result DONE}
		puts "C4TCL GCC (SO/DLL) : lib[set _c_app_]c4tcl$_c_id_.$_c_dllext_ : $result"
	}
}
catch {load ./lib[set _c_app_]c4tcl$_c_id_.$_c_dllext_ C4tcltmp} result
if {$result!=""} {puts "C4TCL ERROR (SO/DLL) LOADING : $result"}
# incr _c_id_
if {$_c_app_ eq "generic"} {incr _c_id_}
}
#_byOS_
proc _byOS_ args {
	global tcl_platform
	switch $tcl_platform(platform) {
		unix {
			return [lindex $args 1]
		}
		windows {
			return [lindex $args 0]
		}
	}
}

#proc _C_LOADDLL_ {
#global _c_flag_
#set _c_flag_ 1
#_C_ {}
#}
