#****************************************
#* c4tcl (c) Cyril BARBATO 2018         *
#* package for call C functions in TCL  *
#* under GPL Lisense                    *
#* *** DISCLAIMER OF ALL WARRANTIES *** *
#****************************************

#PKG TEST AND PROVIDE
if {[catch {package present Tcl 8.6.0}]} return
package provide c4tcl 0.1
#C4TCL _C_ Function
global argv0 argv _c_id_ _c_ext_ _c_app_
set _c_id_ 0
proc _C_ "_c_code {_c_argvstr {$argv0 $argv}} args" {
global env argv0 tcl_platform _c_id_
#Init app name and test platform type
if {$tcl_platform(platform)=="windows"} {set _c_ext_ dll} else {set _c_ext_ so}
#Pass arguments list by environnement variable
set env(LIBC4TCL_ARGS) $_c_argvstr
set _c_app_ [string range [file tail $argv0] 0 end-[string length [file extension [file tail $argv0]]]]
set fd [open "lib[set _c_app_][set _c_id_]c4tcl.c" w]
puts $fd "/****************************************"
puts $fd " * Generated by c4tcl (c) Cyril BARBATO *"
puts $fd " * from calling TCL _C_ function.       *"
puts $fd " * ** DISCLAIMER FROM ALL WARRANTIES ** *"
puts $fd " ****************************************/"
puts $fd "#include <stdlib.h>"
puts $fd "#ifndef _TCL"
puts $fd "#include <tcl.h>"
puts $fd "#endif"
puts $fd "/******************"
puts $fd " * libc4tcl main entry point prototype"
puts $fd " */"
puts $fd "int libc4tcl_main (Tcl_Interp *interp, int argc, char **argv);"
puts $fd $_c_code
puts $fd "/******************"
puts $fd " * TCL Library Init (real) entry point"
puts $fd " */"
puts $fd "int C4tcltmp_Init (Tcl_Interp *interp) \{"
puts $fd "/*init classic C arguments from environnement variable*/"
puts $fd "	int argc=1;"
puts $fd "	char *p=NULL;"
puts $fd "	char *argv\[1024\];"
puts $fd "	argv\[0\]=getenv(\"LIBC4TCL_ARGS\");"
puts $fd "	for (p=argv\[0\];*p!=0;p++) \{"
puts $fd "		if (*p==0x20) \{"
puts $fd "			*p=0;"
puts $fd "			argv\[(++argc-1)\]=++p;"		
puts $fd "		\}"
puts $fd "	\}"
puts $fd "/******************"
puts $fd " * libc4tcl main entry point"
puts $fd " */"
puts $fd "	libc4tcl_main(interp,argc,argv);"
puts $fd "return TCL_OK;"
puts $fd "\}"
close $fd
#CREATE (SO/DLL) IF NOT EXIST FROM C CODE
if [file exists lib[set _c_app_][set _c_id_]c4tcl.$_c_ext_] return
catch "exec gcc -I. -std=c99 -shared -o lib[set _c_app_][set _c_id_]c4tcl.$_c_ext_ lib[set _c_app_][set _c_id_]c4tcl.c ./tcl86.dll $args" result
puts "GCC Info : $result (Path : [pwd]; App flags : $args)"
if {[string first "Permission denied" $result ]!=-1} {} {
	if {[string first "no such file" $result ]!=-1} {} {
		if {$result==""} {} {set result DONE}
		puts "C4TCL GCC (SO/DLL) : lib[set _c_app_][set _c_id_]c4tcl.$_c_ext_ : $result"
	}
}
catch {load lib[set _c_app_][set _c_id_]c4tcl.$_c_ext_ C4tcltmp} result
if {$result!=""} {puts "C4TCL ERROR (SO/DLL) LOADING : $result"}
incr _c_id_
}
proc c4tcl_loaddll {} {
	global tcl_platform
	#Init app name and test platform type
	if {$tcl_platform(platform)=="windows"} {set _c_ext_ dll} else {set _c_ext_ so}
	#LOAD (SO/DLL) IF EXIST
	#catch {foreach dll [glob -type f *c4tcl.$_c_ext_] {puts $dll ; load $dll C4tcltmp}} result
	#if {$result!=""} {puts "C4TCL NO LIB (SO/DLL) LOADING : $result"}
	load libgeneric0c4tcl.dll C4tcltmp
}